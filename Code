---
NAME- Yogesh Kumar
Project- Behavior-of-the-urban-traffic-of-the-city-of-Sao-Paulo-in-Brazil.
Submitted to- Pooja Rana Mam
---
#CODE
import numpy as np
import pandas as pd
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

HOURS = {7:00, 7:30, 8:00, 8:30, 9:00, 9:30, 10:00, 10:30, 11:00, 11:30, 12:00, 12:30, 13:00, 13:30, 14:00, 14:30, 15:00, 15:30, 16:00, 16:30, 17:00, 17:30, 18:00, 18:30, 19:00, 19:30, 20:00} # reference from dataset folder
DATA_PATH = "D:\sao.csv"  
TARGET_VAR = "Slowness in traffic (%)"
MONDAY  = 26
TUESDAY = 53
WEDNESDAY = 80
THURSDAY = 107
FRIDAY = 134
DAYS_TO_CODE = {'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4, 'Friday': 5}



#DATA OVERVIEW

def load_data(path:str=DATA_PATH, sep:str=";"):
    try:
        df = pd.read_csv(path, sep=sep)
        print("Data loaded with success")
        return df
    except FileNotFoundError:
        print("Check your data directory! Nothing there yet...")
        return False

df = load_data()
df.head()

df.isnull().sum()

print(f"Dataframe shape: {df.shape}\n")
df.info()

df.describe()

df.hist(bins=50, figsize=(20, 15))
plt.show()


#DATA MANIPULATION

def transform_target(df, target_var=TARGET_VAR, to=float):
    df[target_var] = df[target_var].str.replace(',', '.').astype(to)
transform_target(df)

# New attribute

def transform_days(df, create_column=False, to_numerical=False):
    #check is day column exists if not create
    #if numerical transformation, go from day to number
    #else go from number to day names
    if create_column:
        df['Day'] = '0'

    position=-1
    if to_numerical is False:
        for idx in df.index:
            if idx <= MONDAY:
                df.iloc[idx, position] = 'Monday'
            elif idx <= TUESDAY:
                df.iloc[idx, position] = 'Tuesday'
            elif idx <= WEDNESDAY:
                df.iloc[idx, position] = 'Wednesday'
            elif idx <= THURSDAY:
                df.iloc[idx, position] = 'Thursday'
            elif idx <= FRIDAY:
                df.iloc[idx, position] = 'Friday'
    else:
        df_values = df["Day"].unique()
        for key, value in DAYS_TO_CODE.items():
            assert key in df_values, "First transform your data into weekday by setting to_numerical=False, then apply the numerical transformation"
            df.loc[(df.Day == key), 'Day'] = value
        df['Day'] = df['Day'].astype(int)

transform_days(df, create_column=True)

# Create code to hour dict

def set_hours_dict(df, hours:dict =HOURS)-> dict:
    hours_arr = []

    for hour, minute in hours.items():
      s1 = str(hour) + ':' + '00'
      s2 = str(hour) + ':' + str(minute)
      if hour != 20:
        hours_arr.append(s1)
        hours_arr.append(s2)
      else:
        hours_arr.append(s1)

    code_to_hour = {}
    for code, hour in zip(df['Hour (Coded)'], hours_arr):
      code_to_hour[code] = hour

    return code_to_hour

code_to_hour = set_hours_dict(df)

def code_hour(code):
  return code_to_hour[code]

#Exploratory Data Analysis

transform_days(df, to_numerical=True)
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), cmap='Blues', annot=True)
plt.show()

corr_matrix = df.corr()
corr_matrix['Slowness in traffic (%)'].sort_values(ascending=False)

attributes = ["Slowness in traffic (%)", "Hour (Coded)"]
scatter_matrix(df[attributes], figsize=(12, 8))

#Plot overtime

def slowness_over_time(df, coded_hours=False):
    fig = plt.figure(figsize=(20, 12))
    ax = fig.add_axes([0, 0, 1, 1])

    colors = {'Monday': 'r', 'Tuesday': 'b', 'Wednesday': 'g', 'Thursday': 'yellow', 'Friday':'black'}
    transform_days(df)
    for e in df['Day'].unique():
        subset = df[df['Day'] == e]
        ax.plot(subset['Hour (Coded)'], subset['Slowness in traffic (%)'],color=colors[e])

    ax.set_title('Slowness in traffic VS. Hour of the day', fontsize=25, pad=15)
    ax.set_xlabel('Hour of the day', fontsize=15)
    ax.set_ylabel('Slowness in traffic (%)', fontsize=15)

    if coded_hours is False:
        ax.set_xticks(range(1, 28))
        ax.set_xticklabels(map(code_hour, subset['Hour (Coded)'].unique()))

    ax.legend(colors, fontsize=20)

    plt.show()
slowness_over_time(df)
transform_days(df, to_numerical=True)
